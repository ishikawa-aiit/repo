"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineRegisterPaths = void 0;
const MemoryRouter_1 = require("../MemoryRouter");
function defineRegisterPaths({ getSortedRoutes, getRouteMatcher, getRouteRegex, isDynamicRoute, normalizePagePath, }) {
    MemoryRouter_1.MemoryRouter.prototype.registerPaths = function (paths) {
        this.pathParser = createPathParserFromPaths(paths);
    };
    const createPathParserFromPaths = (paths) => {
        const matchers = getSortedRoutes(paths.map((path) => normalizePagePath(path))).map((path) => ({
            pathname: path,
            match: getRouteMatcher(getRouteRegex(path)),
        }));
        return (url) => {
            var _a, _b;
            const pathname = (_a = url.pathname) !== null && _a !== void 0 ? _a : "";
            const isDynamic = isDynamicRoute(pathname);
            // @ts-ignore
            const matcher = matchers.find((matcher) => !!matcher.match(pathname));
            const match = matcher ? matcher.match(pathname) : false;
            // When pushing to a dynamic route with un-interpolated slugs passed in the pathname, the assumption is that
            // a query dictionary will be provided, so instead of using the match we interpolate the route from
            // the provided query
            const parsedQuery = isDynamic ? url.query : match ? match : {};
            return Object.assign(Object.assign({}, url), { pathname: (_b = matcher === null || matcher === void 0 ? void 0 : matcher.pathname) !== null && _b !== void 0 ? _b : pathname, query: Object.assign(Object.assign({}, url.query), parsedQuery) });
        };
    };
}
exports.defineRegisterPaths = defineRegisterPaths;
//# sourceMappingURL=MemoryRouter.registerPaths.js.map